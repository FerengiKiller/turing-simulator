//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.8009
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("AUTOMATON")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class AUTOMATON : global::System.Data.DataSet {
    
    private ITEMDataTable tableITEM;
    
    private TOPDataTable tableTOP;
    
    private TYPEDataTable tableTYPE;
    
    private ALPHABETDataTable tableALPHABET;
    
    private TAPEALPHABETDataTable tableTAPEALPHABET;
    
    private STATEDataTable tableSTATE;
    
    private TRANSITIONDataTable tableTRANSITION;
    
    private LABELDataTable tableLABEL;
    
    private INITIALSTATEDataTable tableINITIALSTATE;
    
    private TAPEINITIALCHARDataTable tableTAPEINITIALCHAR;
    
    private LAYOUTDataTable tableLAYOUT;
    
    private STATELAYOUTDataTable tableSTATELAYOUT;
    
    private LEFTDataTable tableLEFT;
    
    private TRANSITIONLAYOUTDataTable tableTRANSITIONLAYOUT;
    
    private global::System.Data.DataRelation relationALPHABET_ITEM;
    
    private global::System.Data.DataRelation relationTAPEALPHABET_ITEM;
    
    private global::System.Data.DataRelation relationTRANSITIONLAYOUT_TOP;
    
    private global::System.Data.DataRelation relationSTATELAYOUT_TOP;
    
    private global::System.Data.DataRelation relationSTATE_TRANSITION;
    
    private global::System.Data.DataRelation relationTRANSITION_LABEL;
    
    private global::System.Data.DataRelation relationLAYOUT_STATELAYOUT;
    
    private global::System.Data.DataRelation relationSTATELAYOUT_LEFT;
    
    private global::System.Data.DataRelation relationSTATELAYOUT_TRANSITIONLAYOUT;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public AUTOMATON() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected AUTOMATON(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["ITEM"] != null)) {
                base.Tables.Add(new ITEMDataTable(ds.Tables["ITEM"]));
            }
            if ((ds.Tables["TOP"] != null)) {
                base.Tables.Add(new TOPDataTable(ds.Tables["TOP"]));
            }
            if ((ds.Tables["TYPE"] != null)) {
                base.Tables.Add(new TYPEDataTable(ds.Tables["TYPE"]));
            }
            if ((ds.Tables["ALPHABET"] != null)) {
                base.Tables.Add(new ALPHABETDataTable(ds.Tables["ALPHABET"]));
            }
            if ((ds.Tables["TAPEALPHABET"] != null)) {
                base.Tables.Add(new TAPEALPHABETDataTable(ds.Tables["TAPEALPHABET"]));
            }
            if ((ds.Tables["STATE"] != null)) {
                base.Tables.Add(new STATEDataTable(ds.Tables["STATE"]));
            }
            if ((ds.Tables["TRANSITION"] != null)) {
                base.Tables.Add(new TRANSITIONDataTable(ds.Tables["TRANSITION"]));
            }
            if ((ds.Tables["LABEL"] != null)) {
                base.Tables.Add(new LABELDataTable(ds.Tables["LABEL"]));
            }
            if ((ds.Tables["INITIALSTATE"] != null)) {
                base.Tables.Add(new INITIALSTATEDataTable(ds.Tables["INITIALSTATE"]));
            }
            if ((ds.Tables["TAPEINITIALCHAR"] != null)) {
                base.Tables.Add(new TAPEINITIALCHARDataTable(ds.Tables["TAPEINITIALCHAR"]));
            }
            if ((ds.Tables["LAYOUT"] != null)) {
                base.Tables.Add(new LAYOUTDataTable(ds.Tables["LAYOUT"]));
            }
            if ((ds.Tables["STATELAYOUT"] != null)) {
                base.Tables.Add(new STATELAYOUTDataTable(ds.Tables["STATELAYOUT"]));
            }
            if ((ds.Tables["LEFT"] != null)) {
                base.Tables.Add(new LEFTDataTable(ds.Tables["LEFT"]));
            }
            if ((ds.Tables["TRANSITIONLAYOUT"] != null)) {
                base.Tables.Add(new TRANSITIONLAYOUTDataTable(ds.Tables["TRANSITIONLAYOUT"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ITEMDataTable ITEM {
        get {
            return this.tableITEM;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public TOPDataTable TOP {
        get {
            return this.tableTOP;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public TYPEDataTable TYPE {
        get {
            return this.tableTYPE;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public ALPHABETDataTable ALPHABET {
        get {
            return this.tableALPHABET;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public TAPEALPHABETDataTable TAPEALPHABET {
        get {
            return this.tableTAPEALPHABET;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public STATEDataTable STATE {
        get {
            return this.tableSTATE;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public TRANSITIONDataTable TRANSITION {
        get {
            return this.tableTRANSITION;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public LABELDataTable LABEL {
        get {
            return this.tableLABEL;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public INITIALSTATEDataTable INITIALSTATE {
        get {
            return this.tableINITIALSTATE;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public TAPEINITIALCHARDataTable TAPEINITIALCHAR {
        get {
            return this.tableTAPEINITIALCHAR;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public LAYOUTDataTable LAYOUT {
        get {
            return this.tableLAYOUT;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public STATELAYOUTDataTable STATELAYOUT {
        get {
            return this.tableSTATELAYOUT;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public LEFTDataTable LEFT {
        get {
            return this.tableLEFT;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public TRANSITIONLAYOUTDataTable TRANSITIONLAYOUT {
        get {
            return this.tableTRANSITIONLAYOUT;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        AUTOMATON cln = ((AUTOMATON)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ITEM"] != null)) {
                base.Tables.Add(new ITEMDataTable(ds.Tables["ITEM"]));
            }
            if ((ds.Tables["TOP"] != null)) {
                base.Tables.Add(new TOPDataTable(ds.Tables["TOP"]));
            }
            if ((ds.Tables["TYPE"] != null)) {
                base.Tables.Add(new TYPEDataTable(ds.Tables["TYPE"]));
            }
            if ((ds.Tables["ALPHABET"] != null)) {
                base.Tables.Add(new ALPHABETDataTable(ds.Tables["ALPHABET"]));
            }
            if ((ds.Tables["TAPEALPHABET"] != null)) {
                base.Tables.Add(new TAPEALPHABETDataTable(ds.Tables["TAPEALPHABET"]));
            }
            if ((ds.Tables["STATE"] != null)) {
                base.Tables.Add(new STATEDataTable(ds.Tables["STATE"]));
            }
            if ((ds.Tables["TRANSITION"] != null)) {
                base.Tables.Add(new TRANSITIONDataTable(ds.Tables["TRANSITION"]));
            }
            if ((ds.Tables["LABEL"] != null)) {
                base.Tables.Add(new LABELDataTable(ds.Tables["LABEL"]));
            }
            if ((ds.Tables["INITIALSTATE"] != null)) {
                base.Tables.Add(new INITIALSTATEDataTable(ds.Tables["INITIALSTATE"]));
            }
            if ((ds.Tables["TAPEINITIALCHAR"] != null)) {
                base.Tables.Add(new TAPEINITIALCHARDataTable(ds.Tables["TAPEINITIALCHAR"]));
            }
            if ((ds.Tables["LAYOUT"] != null)) {
                base.Tables.Add(new LAYOUTDataTable(ds.Tables["LAYOUT"]));
            }
            if ((ds.Tables["STATELAYOUT"] != null)) {
                base.Tables.Add(new STATELAYOUTDataTable(ds.Tables["STATELAYOUT"]));
            }
            if ((ds.Tables["LEFT"] != null)) {
                base.Tables.Add(new LEFTDataTable(ds.Tables["LEFT"]));
            }
            if ((ds.Tables["TRANSITIONLAYOUT"] != null)) {
                base.Tables.Add(new TRANSITIONLAYOUTDataTable(ds.Tables["TRANSITIONLAYOUT"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tableITEM = ((ITEMDataTable)(base.Tables["ITEM"]));
        if ((initTable == true)) {
            if ((this.tableITEM != null)) {
                this.tableITEM.InitVars();
            }
        }
        this.tableTOP = ((TOPDataTable)(base.Tables["TOP"]));
        if ((initTable == true)) {
            if ((this.tableTOP != null)) {
                this.tableTOP.InitVars();
            }
        }
        this.tableTYPE = ((TYPEDataTable)(base.Tables["TYPE"]));
        if ((initTable == true)) {
            if ((this.tableTYPE != null)) {
                this.tableTYPE.InitVars();
            }
        }
        this.tableALPHABET = ((ALPHABETDataTable)(base.Tables["ALPHABET"]));
        if ((initTable == true)) {
            if ((this.tableALPHABET != null)) {
                this.tableALPHABET.InitVars();
            }
        }
        this.tableTAPEALPHABET = ((TAPEALPHABETDataTable)(base.Tables["TAPEALPHABET"]));
        if ((initTable == true)) {
            if ((this.tableTAPEALPHABET != null)) {
                this.tableTAPEALPHABET.InitVars();
            }
        }
        this.tableSTATE = ((STATEDataTable)(base.Tables["STATE"]));
        if ((initTable == true)) {
            if ((this.tableSTATE != null)) {
                this.tableSTATE.InitVars();
            }
        }
        this.tableTRANSITION = ((TRANSITIONDataTable)(base.Tables["TRANSITION"]));
        if ((initTable == true)) {
            if ((this.tableTRANSITION != null)) {
                this.tableTRANSITION.InitVars();
            }
        }
        this.tableLABEL = ((LABELDataTable)(base.Tables["LABEL"]));
        if ((initTable == true)) {
            if ((this.tableLABEL != null)) {
                this.tableLABEL.InitVars();
            }
        }
        this.tableINITIALSTATE = ((INITIALSTATEDataTable)(base.Tables["INITIALSTATE"]));
        if ((initTable == true)) {
            if ((this.tableINITIALSTATE != null)) {
                this.tableINITIALSTATE.InitVars();
            }
        }
        this.tableTAPEINITIALCHAR = ((TAPEINITIALCHARDataTable)(base.Tables["TAPEINITIALCHAR"]));
        if ((initTable == true)) {
            if ((this.tableTAPEINITIALCHAR != null)) {
                this.tableTAPEINITIALCHAR.InitVars();
            }
        }
        this.tableLAYOUT = ((LAYOUTDataTable)(base.Tables["LAYOUT"]));
        if ((initTable == true)) {
            if ((this.tableLAYOUT != null)) {
                this.tableLAYOUT.InitVars();
            }
        }
        this.tableSTATELAYOUT = ((STATELAYOUTDataTable)(base.Tables["STATELAYOUT"]));
        if ((initTable == true)) {
            if ((this.tableSTATELAYOUT != null)) {
                this.tableSTATELAYOUT.InitVars();
            }
        }
        this.tableLEFT = ((LEFTDataTable)(base.Tables["LEFT"]));
        if ((initTable == true)) {
            if ((this.tableLEFT != null)) {
                this.tableLEFT.InitVars();
            }
        }
        this.tableTRANSITIONLAYOUT = ((TRANSITIONLAYOUTDataTable)(base.Tables["TRANSITIONLAYOUT"]));
        if ((initTable == true)) {
            if ((this.tableTRANSITIONLAYOUT != null)) {
                this.tableTRANSITIONLAYOUT.InitVars();
            }
        }
        this.relationALPHABET_ITEM = this.Relations["ALPHABET_ITEM"];
        this.relationTAPEALPHABET_ITEM = this.Relations["TAPEALPHABET_ITEM"];
        this.relationTRANSITIONLAYOUT_TOP = this.Relations["TRANSITIONLAYOUT_TOP"];
        this.relationSTATELAYOUT_TOP = this.Relations["STATELAYOUT_TOP"];
        this.relationSTATE_TRANSITION = this.Relations["STATE_TRANSITION"];
        this.relationTRANSITION_LABEL = this.Relations["TRANSITION_LABEL"];
        this.relationLAYOUT_STATELAYOUT = this.Relations["LAYOUT_STATELAYOUT"];
        this.relationSTATELAYOUT_LEFT = this.Relations["STATELAYOUT_LEFT"];
        this.relationSTATELAYOUT_TRANSITIONLAYOUT = this.Relations["STATELAYOUT_TRANSITIONLAYOUT"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "AUTOMATON";
        this.Prefix = "";
        this.Locale = new global::System.Globalization.CultureInfo("en-US");
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableITEM = new ITEMDataTable();
        base.Tables.Add(this.tableITEM);
        this.tableTOP = new TOPDataTable();
        base.Tables.Add(this.tableTOP);
        this.tableTYPE = new TYPEDataTable();
        base.Tables.Add(this.tableTYPE);
        this.tableALPHABET = new ALPHABETDataTable();
        base.Tables.Add(this.tableALPHABET);
        this.tableTAPEALPHABET = new TAPEALPHABETDataTable();
        base.Tables.Add(this.tableTAPEALPHABET);
        this.tableSTATE = new STATEDataTable();
        base.Tables.Add(this.tableSTATE);
        this.tableTRANSITION = new TRANSITIONDataTable();
        base.Tables.Add(this.tableTRANSITION);
        this.tableLABEL = new LABELDataTable();
        base.Tables.Add(this.tableLABEL);
        this.tableINITIALSTATE = new INITIALSTATEDataTable();
        base.Tables.Add(this.tableINITIALSTATE);
        this.tableTAPEINITIALCHAR = new TAPEINITIALCHARDataTable();
        base.Tables.Add(this.tableTAPEINITIALCHAR);
        this.tableLAYOUT = new LAYOUTDataTable();
        base.Tables.Add(this.tableLAYOUT);
        this.tableSTATELAYOUT = new STATELAYOUTDataTable();
        base.Tables.Add(this.tableSTATELAYOUT);
        this.tableLEFT = new LEFTDataTable();
        base.Tables.Add(this.tableLEFT);
        this.tableTRANSITIONLAYOUT = new TRANSITIONLAYOUTDataTable();
        base.Tables.Add(this.tableTRANSITIONLAYOUT);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("ALPHABET_ITEM", new global::System.Data.DataColumn[] {
                    this.tableALPHABET.ALPHABET_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableITEM.ALPHABET_IdColumn});
        this.tableITEM.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("TAPEALPHABET_ITEM", new global::System.Data.DataColumn[] {
                    this.tableTAPEALPHABET.TAPEALPHABET_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableITEM.TAPEALPHABET_IdColumn});
        this.tableITEM.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("TRANSITIONLAYOUT_TOP", new global::System.Data.DataColumn[] {
                    this.tableTRANSITIONLAYOUT.TRANSITIONLAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTOP.TRANSITIONLAYOUT_IdColumn});
        this.tableTOP.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("STATELAYOUT_TOP", new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.STATELAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTOP.STATELAYOUT_IdColumn});
        this.tableTOP.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("STATE_TRANSITION", new global::System.Data.DataColumn[] {
                    this.tableSTATE.STATE_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTRANSITION.STATE_IdColumn});
        this.tableTRANSITION.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("TRANSITION_LABEL", new global::System.Data.DataColumn[] {
                    this.tableTRANSITION.TRANSITION_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableLABEL.TRANSITION_IdColumn});
        this.tableLABEL.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("LAYOUT_STATELAYOUT", new global::System.Data.DataColumn[] {
                    this.tableLAYOUT.LAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.LAYOUT_IdColumn});
        this.tableSTATELAYOUT.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("STATELAYOUT_LEFT", new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.STATELAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableLEFT.STATELAYOUT_IdColumn});
        this.tableLEFT.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("STATELAYOUT_TRANSITIONLAYOUT", new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.STATELAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTRANSITIONLAYOUT.STATELAYOUT_IdColumn});
        this.tableTRANSITIONLAYOUT.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationALPHABET_ITEM = new global::System.Data.DataRelation("ALPHABET_ITEM", new global::System.Data.DataColumn[] {
                    this.tableALPHABET.ALPHABET_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableITEM.ALPHABET_IdColumn}, false);
        this.relationALPHABET_ITEM.Nested = true;
        this.Relations.Add(this.relationALPHABET_ITEM);
        this.relationTAPEALPHABET_ITEM = new global::System.Data.DataRelation("TAPEALPHABET_ITEM", new global::System.Data.DataColumn[] {
                    this.tableTAPEALPHABET.TAPEALPHABET_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableITEM.TAPEALPHABET_IdColumn}, false);
        this.relationTAPEALPHABET_ITEM.Nested = true;
        this.Relations.Add(this.relationTAPEALPHABET_ITEM);
        this.relationTRANSITIONLAYOUT_TOP = new global::System.Data.DataRelation("TRANSITIONLAYOUT_TOP", new global::System.Data.DataColumn[] {
                    this.tableTRANSITIONLAYOUT.TRANSITIONLAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTOP.TRANSITIONLAYOUT_IdColumn}, false);
        this.relationTRANSITIONLAYOUT_TOP.Nested = true;
        this.Relations.Add(this.relationTRANSITIONLAYOUT_TOP);
        this.relationSTATELAYOUT_TOP = new global::System.Data.DataRelation("STATELAYOUT_TOP", new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.STATELAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTOP.STATELAYOUT_IdColumn}, false);
        this.relationSTATELAYOUT_TOP.Nested = true;
        this.Relations.Add(this.relationSTATELAYOUT_TOP);
        this.relationSTATE_TRANSITION = new global::System.Data.DataRelation("STATE_TRANSITION", new global::System.Data.DataColumn[] {
                    this.tableSTATE.STATE_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTRANSITION.STATE_IdColumn}, false);
        this.relationSTATE_TRANSITION.Nested = true;
        this.Relations.Add(this.relationSTATE_TRANSITION);
        this.relationTRANSITION_LABEL = new global::System.Data.DataRelation("TRANSITION_LABEL", new global::System.Data.DataColumn[] {
                    this.tableTRANSITION.TRANSITION_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableLABEL.TRANSITION_IdColumn}, false);
        this.relationTRANSITION_LABEL.Nested = true;
        this.Relations.Add(this.relationTRANSITION_LABEL);
        this.relationLAYOUT_STATELAYOUT = new global::System.Data.DataRelation("LAYOUT_STATELAYOUT", new global::System.Data.DataColumn[] {
                    this.tableLAYOUT.LAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.LAYOUT_IdColumn}, false);
        this.relationLAYOUT_STATELAYOUT.Nested = true;
        this.Relations.Add(this.relationLAYOUT_STATELAYOUT);
        this.relationSTATELAYOUT_LEFT = new global::System.Data.DataRelation("STATELAYOUT_LEFT", new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.STATELAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableLEFT.STATELAYOUT_IdColumn}, false);
        this.relationSTATELAYOUT_LEFT.Nested = true;
        this.Relations.Add(this.relationSTATELAYOUT_LEFT);
        this.relationSTATELAYOUT_TRANSITIONLAYOUT = new global::System.Data.DataRelation("STATELAYOUT_TRANSITIONLAYOUT", new global::System.Data.DataColumn[] {
                    this.tableSTATELAYOUT.STATELAYOUT_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableTRANSITIONLAYOUT.STATELAYOUT_IdColumn}, false);
        this.relationSTATELAYOUT_TRANSITIONLAYOUT.Nested = true;
        this.Relations.Add(this.relationSTATELAYOUT_TRANSITIONLAYOUT);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeITEM() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeTOP() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeTYPE() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeALPHABET() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeTAPEALPHABET() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeSTATE() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeTRANSITION() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeLABEL() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeINITIALSTATE() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeTAPEINITIALCHAR() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeLAYOUT() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeSTATELAYOUT() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeLEFT() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeTRANSITIONLAYOUT() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        AUTOMATON ds = new AUTOMATON();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void ITEMRowChangeEventHandler(object sender, ITEMRowChangeEvent e);
    
    public delegate void TOPRowChangeEventHandler(object sender, TOPRowChangeEvent e);
    
    public delegate void TYPERowChangeEventHandler(object sender, TYPERowChangeEvent e);
    
    public delegate void ALPHABETRowChangeEventHandler(object sender, ALPHABETRowChangeEvent e);
    
    public delegate void TAPEALPHABETRowChangeEventHandler(object sender, TAPEALPHABETRowChangeEvent e);
    
    public delegate void STATERowChangeEventHandler(object sender, STATERowChangeEvent e);
    
    public delegate void TRANSITIONRowChangeEventHandler(object sender, TRANSITIONRowChangeEvent e);
    
    public delegate void LABELRowChangeEventHandler(object sender, LABELRowChangeEvent e);
    
    public delegate void INITIALSTATERowChangeEventHandler(object sender, INITIALSTATERowChangeEvent e);
    
    public delegate void TAPEINITIALCHARRowChangeEventHandler(object sender, TAPEINITIALCHARRowChangeEvent e);
    
    public delegate void LAYOUTRowChangeEventHandler(object sender, LAYOUTRowChangeEvent e);
    
    public delegate void STATELAYOUTRowChangeEventHandler(object sender, STATELAYOUTRowChangeEvent e);
    
    public delegate void LEFTRowChangeEventHandler(object sender, LEFTRowChangeEvent e);
    
    public delegate void TRANSITIONLAYOUTRowChangeEventHandler(object sender, TRANSITIONLAYOUTRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ITEMDataTable : global::System.Data.TypedTableBase<ITEMRow> {
        
        private global::System.Data.DataColumn columnvalue;
        
        private global::System.Data.DataColumn columnALPHABET_Id;
        
        private global::System.Data.DataColumn columnTAPEALPHABET_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMDataTable() {
            this.TableName = "ITEM";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ITEMDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ITEMDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ALPHABET_IdColumn {
            get {
                return this.columnALPHABET_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TAPEALPHABET_IdColumn {
            get {
                return this.columnTAPEALPHABET_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRow this[int index] {
            get {
                return ((ITEMRow)(this.Rows[index]));
            }
        }
        
        public event ITEMRowChangeEventHandler ITEMRowChanging;
        
        public event ITEMRowChangeEventHandler ITEMRowChanged;
        
        public event ITEMRowChangeEventHandler ITEMRowDeleting;
        
        public event ITEMRowChangeEventHandler ITEMRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddITEMRow(ITEMRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRow AddITEMRow(string value, ALPHABETRow parentALPHABETRowByALPHABET_ITEM, TAPEALPHABETRow parentTAPEALPHABETRowByTAPEALPHABET_ITEM) {
            ITEMRow rowITEMRow = ((ITEMRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value,
                    null,
                    null};
            if ((parentALPHABETRowByALPHABET_ITEM != null)) {
                columnValuesArray[1] = parentALPHABETRowByALPHABET_ITEM[0];
            }
            if ((parentTAPEALPHABETRowByTAPEALPHABET_ITEM != null)) {
                columnValuesArray[2] = parentTAPEALPHABETRowByTAPEALPHABET_ITEM[0];
            }
            rowITEMRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowITEMRow);
            return rowITEMRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ITEMDataTable cln = ((ITEMDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ITEMDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
            this.columnALPHABET_Id = base.Columns["ALPHABET_Id"];
            this.columnTAPEALPHABET_Id = base.Columns["TAPEALPHABET_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnALPHABET_Id = new global::System.Data.DataColumn("ALPHABET_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnALPHABET_Id);
            this.columnTAPEALPHABET_Id = new global::System.Data.DataColumn("TAPEALPHABET_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnTAPEALPHABET_Id);
            this.columnvalue.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRow NewITEMRow() {
            return ((ITEMRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ITEMRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ITEMRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ITEMRowChanged != null)) {
                this.ITEMRowChanged(this, new ITEMRowChangeEvent(((ITEMRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ITEMRowChanging != null)) {
                this.ITEMRowChanging(this, new ITEMRowChangeEvent(((ITEMRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ITEMRowDeleted != null)) {
                this.ITEMRowDeleted(this, new ITEMRowChangeEvent(((ITEMRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ITEMRowDeleting != null)) {
                this.ITEMRowDeleting(this, new ITEMRowChangeEvent(((ITEMRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveITEMRow(ITEMRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ITEMDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class TOPDataTable : global::System.Data.TypedTableBase<TOPRow> {
        
        private global::System.Data.DataColumn columnvalue;
        
        private global::System.Data.DataColumn columnTRANSITIONLAYOUT_Id;
        
        private global::System.Data.DataColumn columnSTATELAYOUT_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPDataTable() {
            this.TableName = "TOP";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TOPDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TOPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TRANSITIONLAYOUT_IdColumn {
            get {
                return this.columnTRANSITIONLAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STATELAYOUT_IdColumn {
            get {
                return this.columnSTATELAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRow this[int index] {
            get {
                return ((TOPRow)(this.Rows[index]));
            }
        }
        
        public event TOPRowChangeEventHandler TOPRowChanging;
        
        public event TOPRowChangeEventHandler TOPRowChanged;
        
        public event TOPRowChangeEventHandler TOPRowDeleting;
        
        public event TOPRowChangeEventHandler TOPRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddTOPRow(TOPRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRow AddTOPRow(string value, TRANSITIONLAYOUTRow parentTRANSITIONLAYOUTRowByTRANSITIONLAYOUT_TOP, STATELAYOUTRow parentSTATELAYOUTRowBySTATELAYOUT_TOP) {
            TOPRow rowTOPRow = ((TOPRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value,
                    null,
                    null};
            if ((parentTRANSITIONLAYOUTRowByTRANSITIONLAYOUT_TOP != null)) {
                columnValuesArray[1] = parentTRANSITIONLAYOUTRowByTRANSITIONLAYOUT_TOP[2];
            }
            if ((parentSTATELAYOUTRowBySTATELAYOUT_TOP != null)) {
                columnValuesArray[2] = parentSTATELAYOUTRowBySTATELAYOUT_TOP[1];
            }
            rowTOPRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowTOPRow);
            return rowTOPRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            TOPDataTable cln = ((TOPDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new TOPDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
            this.columnTRANSITIONLAYOUT_Id = base.Columns["TRANSITIONLAYOUT_Id"];
            this.columnSTATELAYOUT_Id = base.Columns["STATELAYOUT_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnTRANSITIONLAYOUT_Id = new global::System.Data.DataColumn("TRANSITIONLAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnTRANSITIONLAYOUT_Id);
            this.columnSTATELAYOUT_Id = new global::System.Data.DataColumn("STATELAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSTATELAYOUT_Id);
            this.columnvalue.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRow NewTOPRow() {
            return ((TOPRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new TOPRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(TOPRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.TOPRowChanged != null)) {
                this.TOPRowChanged(this, new TOPRowChangeEvent(((TOPRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.TOPRowChanging != null)) {
                this.TOPRowChanging(this, new TOPRowChangeEvent(((TOPRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.TOPRowDeleted != null)) {
                this.TOPRowDeleted(this, new TOPRowChangeEvent(((TOPRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.TOPRowDeleting != null)) {
                this.TOPRowDeleting(this, new TOPRowChangeEvent(((TOPRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveTOPRow(TOPRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "TOPDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class TYPEDataTable : global::System.Data.TypedTableBase<TYPERow> {
        
        private global::System.Data.DataColumn columnvalue;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYPEDataTable() {
            this.TableName = "TYPE";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TYPEDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYPERow this[int index] {
            get {
                return ((TYPERow)(this.Rows[index]));
            }
        }
        
        public event TYPERowChangeEventHandler TYPERowChanging;
        
        public event TYPERowChangeEventHandler TYPERowChanged;
        
        public event TYPERowChangeEventHandler TYPERowDeleting;
        
        public event TYPERowChangeEventHandler TYPERowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddTYPERow(TYPERow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYPERow AddTYPERow(string value) {
            TYPERow rowTYPERow = ((TYPERow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value};
            rowTYPERow.ItemArray = columnValuesArray;
            this.Rows.Add(rowTYPERow);
            return rowTYPERow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            TYPEDataTable cln = ((TYPEDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new TYPEDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnvalue.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYPERow NewTYPERow() {
            return ((TYPERow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new TYPERow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(TYPERow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.TYPERowChanged != null)) {
                this.TYPERowChanged(this, new TYPERowChangeEvent(((TYPERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.TYPERowChanging != null)) {
                this.TYPERowChanging(this, new TYPERowChangeEvent(((TYPERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.TYPERowDeleted != null)) {
                this.TYPERowDeleted(this, new TYPERowChangeEvent(((TYPERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.TYPERowDeleting != null)) {
                this.TYPERowDeleting(this, new TYPERowChangeEvent(((TYPERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveTYPERow(TYPERow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "TYPEDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class ALPHABETDataTable : global::System.Data.TypedTableBase<ALPHABETRow> {
        
        private global::System.Data.DataColumn columnALPHABET_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETDataTable() {
            this.TableName = "ALPHABET";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ALPHABETDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ALPHABETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn ALPHABET_IdColumn {
            get {
                return this.columnALPHABET_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETRow this[int index] {
            get {
                return ((ALPHABETRow)(this.Rows[index]));
            }
        }
        
        public event ALPHABETRowChangeEventHandler ALPHABETRowChanging;
        
        public event ALPHABETRowChangeEventHandler ALPHABETRowChanged;
        
        public event ALPHABETRowChangeEventHandler ALPHABETRowDeleting;
        
        public event ALPHABETRowChangeEventHandler ALPHABETRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddALPHABETRow(ALPHABETRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETRow AddALPHABETRow() {
            ALPHABETRow rowALPHABETRow = ((ALPHABETRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null};
            rowALPHABETRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowALPHABETRow);
            return rowALPHABETRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            ALPHABETDataTable cln = ((ALPHABETDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new ALPHABETDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnALPHABET_Id = base.Columns["ALPHABET_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnALPHABET_Id = new global::System.Data.DataColumn("ALPHABET_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnALPHABET_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnALPHABET_Id}, true));
            this.columnALPHABET_Id.AutoIncrement = true;
            this.columnALPHABET_Id.AllowDBNull = false;
            this.columnALPHABET_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETRow NewALPHABETRow() {
            return ((ALPHABETRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new ALPHABETRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(ALPHABETRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.ALPHABETRowChanged != null)) {
                this.ALPHABETRowChanged(this, new ALPHABETRowChangeEvent(((ALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.ALPHABETRowChanging != null)) {
                this.ALPHABETRowChanging(this, new ALPHABETRowChangeEvent(((ALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.ALPHABETRowDeleted != null)) {
                this.ALPHABETRowDeleted(this, new ALPHABETRowChangeEvent(((ALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.ALPHABETRowDeleting != null)) {
                this.ALPHABETRowDeleting(this, new ALPHABETRowChangeEvent(((ALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveALPHABETRow(ALPHABETRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "ALPHABETDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class TAPEALPHABETDataTable : global::System.Data.TypedTableBase<TAPEALPHABETRow> {
        
        private global::System.Data.DataColumn columnTAPEALPHABET_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETDataTable() {
            this.TableName = "TAPEALPHABET";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TAPEALPHABETDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TAPEALPHABETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TAPEALPHABET_IdColumn {
            get {
                return this.columnTAPEALPHABET_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETRow this[int index] {
            get {
                return ((TAPEALPHABETRow)(this.Rows[index]));
            }
        }
        
        public event TAPEALPHABETRowChangeEventHandler TAPEALPHABETRowChanging;
        
        public event TAPEALPHABETRowChangeEventHandler TAPEALPHABETRowChanged;
        
        public event TAPEALPHABETRowChangeEventHandler TAPEALPHABETRowDeleting;
        
        public event TAPEALPHABETRowChangeEventHandler TAPEALPHABETRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddTAPEALPHABETRow(TAPEALPHABETRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETRow AddTAPEALPHABETRow() {
            TAPEALPHABETRow rowTAPEALPHABETRow = ((TAPEALPHABETRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null};
            rowTAPEALPHABETRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowTAPEALPHABETRow);
            return rowTAPEALPHABETRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            TAPEALPHABETDataTable cln = ((TAPEALPHABETDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new TAPEALPHABETDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnTAPEALPHABET_Id = base.Columns["TAPEALPHABET_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnTAPEALPHABET_Id = new global::System.Data.DataColumn("TAPEALPHABET_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnTAPEALPHABET_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnTAPEALPHABET_Id}, true));
            this.columnTAPEALPHABET_Id.AutoIncrement = true;
            this.columnTAPEALPHABET_Id.AllowDBNull = false;
            this.columnTAPEALPHABET_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETRow NewTAPEALPHABETRow() {
            return ((TAPEALPHABETRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new TAPEALPHABETRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(TAPEALPHABETRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.TAPEALPHABETRowChanged != null)) {
                this.TAPEALPHABETRowChanged(this, new TAPEALPHABETRowChangeEvent(((TAPEALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.TAPEALPHABETRowChanging != null)) {
                this.TAPEALPHABETRowChanging(this, new TAPEALPHABETRowChangeEvent(((TAPEALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.TAPEALPHABETRowDeleted != null)) {
                this.TAPEALPHABETRowDeleted(this, new TAPEALPHABETRowChangeEvent(((TAPEALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.TAPEALPHABETRowDeleting != null)) {
                this.TAPEALPHABETRowDeleting(this, new TAPEALPHABETRowChangeEvent(((TAPEALPHABETRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveTAPEALPHABETRow(TAPEALPHABETRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "TAPEALPHABETDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class STATEDataTable : global::System.Data.TypedTableBase<STATERow> {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columnfinalstate;
        
        private global::System.Data.DataColumn columnSTATE_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATEDataTable() {
            this.TableName = "STATE";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal STATEDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected STATEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn finalstateColumn {
            get {
                return this.columnfinalstate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STATE_IdColumn {
            get {
                return this.columnSTATE_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATERow this[int index] {
            get {
                return ((STATERow)(this.Rows[index]));
            }
        }
        
        public event STATERowChangeEventHandler STATERowChanging;
        
        public event STATERowChangeEventHandler STATERowChanged;
        
        public event STATERowChangeEventHandler STATERowDeleting;
        
        public event STATERowChangeEventHandler STATERowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddSTATERow(STATERow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATERow AddSTATERow(string name, string finalstate) {
            STATERow rowSTATERow = ((STATERow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    finalstate,
                    null};
            rowSTATERow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSTATERow);
            return rowSTATERow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            STATEDataTable cln = ((STATEDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new STATEDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columnfinalstate = base.Columns["finalstate"];
            this.columnSTATE_Id = base.Columns["STATE_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnname);
            this.columnfinalstate = new global::System.Data.DataColumn("finalstate", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnfinalstate);
            this.columnSTATE_Id = new global::System.Data.DataColumn("STATE_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSTATE_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnSTATE_Id}, true));
            this.columnname.Namespace = "";
            this.columnfinalstate.Namespace = "";
            this.columnSTATE_Id.AutoIncrement = true;
            this.columnSTATE_Id.AllowDBNull = false;
            this.columnSTATE_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATERow NewSTATERow() {
            return ((STATERow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new STATERow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(STATERow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.STATERowChanged != null)) {
                this.STATERowChanged(this, new STATERowChangeEvent(((STATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.STATERowChanging != null)) {
                this.STATERowChanging(this, new STATERowChangeEvent(((STATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.STATERowDeleted != null)) {
                this.STATERowDeleted(this, new STATERowChangeEvent(((STATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.STATERowDeleting != null)) {
                this.STATERowDeleting(this, new STATERowChangeEvent(((STATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveSTATERow(STATERow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "STATEDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class TRANSITIONDataTable : global::System.Data.TypedTableBase<TRANSITIONRow> {
        
        private global::System.Data.DataColumn columntarget;
        
        private global::System.Data.DataColumn columnTRANSITION_Id;
        
        private global::System.Data.DataColumn columnSTATE_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONDataTable() {
            this.TableName = "TRANSITION";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TRANSITIONDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TRANSITIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn targetColumn {
            get {
                return this.columntarget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TRANSITION_IdColumn {
            get {
                return this.columnTRANSITION_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STATE_IdColumn {
            get {
                return this.columnSTATE_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRow this[int index] {
            get {
                return ((TRANSITIONRow)(this.Rows[index]));
            }
        }
        
        public event TRANSITIONRowChangeEventHandler TRANSITIONRowChanging;
        
        public event TRANSITIONRowChangeEventHandler TRANSITIONRowChanged;
        
        public event TRANSITIONRowChangeEventHandler TRANSITIONRowDeleting;
        
        public event TRANSITIONRowChangeEventHandler TRANSITIONRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddTRANSITIONRow(TRANSITIONRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRow AddTRANSITIONRow(string target, STATERow parentSTATERowBySTATE_TRANSITION) {
            TRANSITIONRow rowTRANSITIONRow = ((TRANSITIONRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    target,
                    null,
                    null};
            if ((parentSTATERowBySTATE_TRANSITION != null)) {
                columnValuesArray[2] = parentSTATERowBySTATE_TRANSITION[2];
            }
            rowTRANSITIONRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowTRANSITIONRow);
            return rowTRANSITIONRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            TRANSITIONDataTable cln = ((TRANSITIONDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new TRANSITIONDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columntarget = base.Columns["target"];
            this.columnTRANSITION_Id = base.Columns["TRANSITION_Id"];
            this.columnSTATE_Id = base.Columns["STATE_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columntarget = new global::System.Data.DataColumn("target", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columntarget);
            this.columnTRANSITION_Id = new global::System.Data.DataColumn("TRANSITION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnTRANSITION_Id);
            this.columnSTATE_Id = new global::System.Data.DataColumn("STATE_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSTATE_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnTRANSITION_Id}, true));
            this.columntarget.Namespace = "";
            this.columnTRANSITION_Id.AutoIncrement = true;
            this.columnTRANSITION_Id.AllowDBNull = false;
            this.columnTRANSITION_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRow NewTRANSITIONRow() {
            return ((TRANSITIONRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new TRANSITIONRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(TRANSITIONRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.TRANSITIONRowChanged != null)) {
                this.TRANSITIONRowChanged(this, new TRANSITIONRowChangeEvent(((TRANSITIONRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.TRANSITIONRowChanging != null)) {
                this.TRANSITIONRowChanging(this, new TRANSITIONRowChangeEvent(((TRANSITIONRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.TRANSITIONRowDeleted != null)) {
                this.TRANSITIONRowDeleted(this, new TRANSITIONRowChangeEvent(((TRANSITIONRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.TRANSITIONRowDeleting != null)) {
                this.TRANSITIONRowDeleting(this, new TRANSITIONRowChangeEvent(((TRANSITIONRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveTRANSITIONRow(TRANSITIONRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "TRANSITIONDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class LABELDataTable : global::System.Data.TypedTableBase<LABELRow> {
        
        private global::System.Data.DataColumn columnread;
        
        private global::System.Data.DataColumn columndirection;
        
        private global::System.Data.DataColumn columnwrite;
        
        private global::System.Data.DataColumn columnTRANSITION_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELDataTable() {
            this.TableName = "LABEL";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal LABELDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LABELDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn readColumn {
            get {
                return this.columnread;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn directionColumn {
            get {
                return this.columndirection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn writeColumn {
            get {
                return this.columnwrite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TRANSITION_IdColumn {
            get {
                return this.columnTRANSITION_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELRow this[int index] {
            get {
                return ((LABELRow)(this.Rows[index]));
            }
        }
        
        public event LABELRowChangeEventHandler LABELRowChanging;
        
        public event LABELRowChangeEventHandler LABELRowChanged;
        
        public event LABELRowChangeEventHandler LABELRowDeleting;
        
        public event LABELRowChangeEventHandler LABELRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddLABELRow(LABELRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELRow AddLABELRow(string read, string direction, string write, TRANSITIONRow parentTRANSITIONRowByTRANSITION_LABEL) {
            LABELRow rowLABELRow = ((LABELRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    read,
                    direction,
                    write,
                    null};
            if ((parentTRANSITIONRowByTRANSITION_LABEL != null)) {
                columnValuesArray[3] = parentTRANSITIONRowByTRANSITION_LABEL[1];
            }
            rowLABELRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowLABELRow);
            return rowLABELRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            LABELDataTable cln = ((LABELDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new LABELDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnread = base.Columns["read"];
            this.columndirection = base.Columns["direction"];
            this.columnwrite = base.Columns["write"];
            this.columnTRANSITION_Id = base.Columns["TRANSITION_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnread = new global::System.Data.DataColumn("read", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnread);
            this.columndirection = new global::System.Data.DataColumn("direction", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columndirection);
            this.columnwrite = new global::System.Data.DataColumn("write", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnwrite);
            this.columnTRANSITION_Id = new global::System.Data.DataColumn("TRANSITION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnTRANSITION_Id);
            this.columnread.Namespace = "";
            this.columndirection.Namespace = "";
            this.columnwrite.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELRow NewLABELRow() {
            return ((LABELRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new LABELRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(LABELRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.LABELRowChanged != null)) {
                this.LABELRowChanged(this, new LABELRowChangeEvent(((LABELRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.LABELRowChanging != null)) {
                this.LABELRowChanging(this, new LABELRowChangeEvent(((LABELRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.LABELRowDeleted != null)) {
                this.LABELRowDeleted(this, new LABELRowChangeEvent(((LABELRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.LABELRowDeleting != null)) {
                this.LABELRowDeleting(this, new LABELRowChangeEvent(((LABELRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveLABELRow(LABELRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "LABELDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class INITIALSTATEDataTable : global::System.Data.TypedTableBase<INITIALSTATERow> {
        
        private global::System.Data.DataColumn columnvalue;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INITIALSTATEDataTable() {
            this.TableName = "INITIALSTATE";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal INITIALSTATEDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected INITIALSTATEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INITIALSTATERow this[int index] {
            get {
                return ((INITIALSTATERow)(this.Rows[index]));
            }
        }
        
        public event INITIALSTATERowChangeEventHandler INITIALSTATERowChanging;
        
        public event INITIALSTATERowChangeEventHandler INITIALSTATERowChanged;
        
        public event INITIALSTATERowChangeEventHandler INITIALSTATERowDeleting;
        
        public event INITIALSTATERowChangeEventHandler INITIALSTATERowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddINITIALSTATERow(INITIALSTATERow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INITIALSTATERow AddINITIALSTATERow(string value) {
            INITIALSTATERow rowINITIALSTATERow = ((INITIALSTATERow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value};
            rowINITIALSTATERow.ItemArray = columnValuesArray;
            this.Rows.Add(rowINITIALSTATERow);
            return rowINITIALSTATERow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            INITIALSTATEDataTable cln = ((INITIALSTATEDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new INITIALSTATEDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnvalue.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INITIALSTATERow NewINITIALSTATERow() {
            return ((INITIALSTATERow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new INITIALSTATERow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(INITIALSTATERow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.INITIALSTATERowChanged != null)) {
                this.INITIALSTATERowChanged(this, new INITIALSTATERowChangeEvent(((INITIALSTATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.INITIALSTATERowChanging != null)) {
                this.INITIALSTATERowChanging(this, new INITIALSTATERowChangeEvent(((INITIALSTATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.INITIALSTATERowDeleted != null)) {
                this.INITIALSTATERowDeleted(this, new INITIALSTATERowChangeEvent(((INITIALSTATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.INITIALSTATERowDeleting != null)) {
                this.INITIALSTATERowDeleting(this, new INITIALSTATERowChangeEvent(((INITIALSTATERow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveINITIALSTATERow(INITIALSTATERow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "INITIALSTATEDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class TAPEINITIALCHARDataTable : global::System.Data.TypedTableBase<TAPEINITIALCHARRow> {
        
        private global::System.Data.DataColumn columnvalue;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEINITIALCHARDataTable() {
            this.TableName = "TAPEINITIALCHAR";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TAPEINITIALCHARDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TAPEINITIALCHARDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEINITIALCHARRow this[int index] {
            get {
                return ((TAPEINITIALCHARRow)(this.Rows[index]));
            }
        }
        
        public event TAPEINITIALCHARRowChangeEventHandler TAPEINITIALCHARRowChanging;
        
        public event TAPEINITIALCHARRowChangeEventHandler TAPEINITIALCHARRowChanged;
        
        public event TAPEINITIALCHARRowChangeEventHandler TAPEINITIALCHARRowDeleting;
        
        public event TAPEINITIALCHARRowChangeEventHandler TAPEINITIALCHARRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddTAPEINITIALCHARRow(TAPEINITIALCHARRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEINITIALCHARRow AddTAPEINITIALCHARRow(string value) {
            TAPEINITIALCHARRow rowTAPEINITIALCHARRow = ((TAPEINITIALCHARRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value};
            rowTAPEINITIALCHARRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowTAPEINITIALCHARRow);
            return rowTAPEINITIALCHARRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            TAPEINITIALCHARDataTable cln = ((TAPEINITIALCHARDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new TAPEINITIALCHARDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnvalue.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEINITIALCHARRow NewTAPEINITIALCHARRow() {
            return ((TAPEINITIALCHARRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new TAPEINITIALCHARRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(TAPEINITIALCHARRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.TAPEINITIALCHARRowChanged != null)) {
                this.TAPEINITIALCHARRowChanged(this, new TAPEINITIALCHARRowChangeEvent(((TAPEINITIALCHARRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.TAPEINITIALCHARRowChanging != null)) {
                this.TAPEINITIALCHARRowChanging(this, new TAPEINITIALCHARRowChangeEvent(((TAPEINITIALCHARRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.TAPEINITIALCHARRowDeleted != null)) {
                this.TAPEINITIALCHARRowDeleted(this, new TAPEINITIALCHARRowChangeEvent(((TAPEINITIALCHARRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.TAPEINITIALCHARRowDeleting != null)) {
                this.TAPEINITIALCHARRowDeleting(this, new TAPEINITIALCHARRowChangeEvent(((TAPEINITIALCHARRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveTAPEINITIALCHARRow(TAPEINITIALCHARRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "TAPEINITIALCHARDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class LAYOUTDataTable : global::System.Data.TypedTableBase<LAYOUTRow> {
        
        private global::System.Data.DataColumn columnNOTEPAD;
        
        private global::System.Data.DataColumn columnLAYOUT_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTDataTable() {
            this.TableName = "LAYOUT";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal LAYOUTDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LAYOUTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NOTEPADColumn {
            get {
                return this.columnNOTEPAD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn LAYOUT_IdColumn {
            get {
                return this.columnLAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTRow this[int index] {
            get {
                return ((LAYOUTRow)(this.Rows[index]));
            }
        }
        
        public event LAYOUTRowChangeEventHandler LAYOUTRowChanging;
        
        public event LAYOUTRowChangeEventHandler LAYOUTRowChanged;
        
        public event LAYOUTRowChangeEventHandler LAYOUTRowDeleting;
        
        public event LAYOUTRowChangeEventHandler LAYOUTRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddLAYOUTRow(LAYOUTRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTRow AddLAYOUTRow(string NOTEPAD) {
            LAYOUTRow rowLAYOUTRow = ((LAYOUTRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    NOTEPAD,
                    null};
            rowLAYOUTRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowLAYOUTRow);
            return rowLAYOUTRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            LAYOUTDataTable cln = ((LAYOUTDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new LAYOUTDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnNOTEPAD = base.Columns["NOTEPAD"];
            this.columnLAYOUT_Id = base.Columns["LAYOUT_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnNOTEPAD = new global::System.Data.DataColumn("NOTEPAD", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnNOTEPAD);
            this.columnLAYOUT_Id = new global::System.Data.DataColumn("LAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnLAYOUT_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnLAYOUT_Id}, true));
            this.columnLAYOUT_Id.AutoIncrement = true;
            this.columnLAYOUT_Id.AllowDBNull = false;
            this.columnLAYOUT_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTRow NewLAYOUTRow() {
            return ((LAYOUTRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new LAYOUTRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(LAYOUTRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.LAYOUTRowChanged != null)) {
                this.LAYOUTRowChanged(this, new LAYOUTRowChangeEvent(((LAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.LAYOUTRowChanging != null)) {
                this.LAYOUTRowChanging(this, new LAYOUTRowChangeEvent(((LAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.LAYOUTRowDeleted != null)) {
                this.LAYOUTRowDeleted(this, new LAYOUTRowChangeEvent(((LAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.LAYOUTRowDeleting != null)) {
                this.LAYOUTRowDeleting(this, new LAYOUTRowChangeEvent(((LAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveLAYOUTRow(LAYOUTRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "LAYOUTDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class STATELAYOUTDataTable : global::System.Data.TypedTableBase<STATELAYOUTRow> {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columnSTATELAYOUT_Id;
        
        private global::System.Data.DataColumn columnLAYOUT_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTDataTable() {
            this.TableName = "STATELAYOUT";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal STATELAYOUTDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected STATELAYOUTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STATELAYOUT_IdColumn {
            get {
                return this.columnSTATELAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn LAYOUT_IdColumn {
            get {
                return this.columnLAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow this[int index] {
            get {
                return ((STATELAYOUTRow)(this.Rows[index]));
            }
        }
        
        public event STATELAYOUTRowChangeEventHandler STATELAYOUTRowChanging;
        
        public event STATELAYOUTRowChangeEventHandler STATELAYOUTRowChanged;
        
        public event STATELAYOUTRowChangeEventHandler STATELAYOUTRowDeleting;
        
        public event STATELAYOUTRowChangeEventHandler STATELAYOUTRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddSTATELAYOUTRow(STATELAYOUTRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow AddSTATELAYOUTRow(string name, LAYOUTRow parentLAYOUTRowByLAYOUT_STATELAYOUT) {
            STATELAYOUTRow rowSTATELAYOUTRow = ((STATELAYOUTRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    null,
                    null};
            if ((parentLAYOUTRowByLAYOUT_STATELAYOUT != null)) {
                columnValuesArray[2] = parentLAYOUTRowByLAYOUT_STATELAYOUT[1];
            }
            rowSTATELAYOUTRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowSTATELAYOUTRow);
            return rowSTATELAYOUTRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            STATELAYOUTDataTable cln = ((STATELAYOUTDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new STATELAYOUTDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columnSTATELAYOUT_Id = base.Columns["STATELAYOUT_Id"];
            this.columnLAYOUT_Id = base.Columns["LAYOUT_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnname);
            this.columnSTATELAYOUT_Id = new global::System.Data.DataColumn("STATELAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSTATELAYOUT_Id);
            this.columnLAYOUT_Id = new global::System.Data.DataColumn("LAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnLAYOUT_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnSTATELAYOUT_Id}, true));
            this.columnname.Namespace = "";
            this.columnSTATELAYOUT_Id.AutoIncrement = true;
            this.columnSTATELAYOUT_Id.AllowDBNull = false;
            this.columnSTATELAYOUT_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow NewSTATELAYOUTRow() {
            return ((STATELAYOUTRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new STATELAYOUTRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(STATELAYOUTRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.STATELAYOUTRowChanged != null)) {
                this.STATELAYOUTRowChanged(this, new STATELAYOUTRowChangeEvent(((STATELAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.STATELAYOUTRowChanging != null)) {
                this.STATELAYOUTRowChanging(this, new STATELAYOUTRowChangeEvent(((STATELAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.STATELAYOUTRowDeleted != null)) {
                this.STATELAYOUTRowDeleted(this, new STATELAYOUTRowChangeEvent(((STATELAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.STATELAYOUTRowDeleting != null)) {
                this.STATELAYOUTRowDeleting(this, new STATELAYOUTRowChangeEvent(((STATELAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveSTATELAYOUTRow(STATELAYOUTRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "STATELAYOUTDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class LEFTDataTable : global::System.Data.TypedTableBase<LEFTRow> {
        
        private global::System.Data.DataColumn columnvalue;
        
        private global::System.Data.DataColumn columnSTATELAYOUT_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTDataTable() {
            this.TableName = "LEFT";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal LEFTDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LEFTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn valueColumn {
            get {
                return this.columnvalue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STATELAYOUT_IdColumn {
            get {
                return this.columnSTATELAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTRow this[int index] {
            get {
                return ((LEFTRow)(this.Rows[index]));
            }
        }
        
        public event LEFTRowChangeEventHandler LEFTRowChanging;
        
        public event LEFTRowChangeEventHandler LEFTRowChanged;
        
        public event LEFTRowChangeEventHandler LEFTRowDeleting;
        
        public event LEFTRowChangeEventHandler LEFTRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddLEFTRow(LEFTRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTRow AddLEFTRow(string value, STATELAYOUTRow parentSTATELAYOUTRowBySTATELAYOUT_LEFT) {
            LEFTRow rowLEFTRow = ((LEFTRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    value,
                    null};
            if ((parentSTATELAYOUTRowBySTATELAYOUT_LEFT != null)) {
                columnValuesArray[1] = parentSTATELAYOUTRowBySTATELAYOUT_LEFT[1];
            }
            rowLEFTRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowLEFTRow);
            return rowLEFTRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            LEFTDataTable cln = ((LEFTDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new LEFTDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnvalue = base.Columns["value"];
            this.columnSTATELAYOUT_Id = base.Columns["STATELAYOUT_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnvalue);
            this.columnSTATELAYOUT_Id = new global::System.Data.DataColumn("STATELAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSTATELAYOUT_Id);
            this.columnvalue.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTRow NewLEFTRow() {
            return ((LEFTRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new LEFTRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(LEFTRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.LEFTRowChanged != null)) {
                this.LEFTRowChanged(this, new LEFTRowChangeEvent(((LEFTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.LEFTRowChanging != null)) {
                this.LEFTRowChanging(this, new LEFTRowChangeEvent(((LEFTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.LEFTRowDeleted != null)) {
                this.LEFTRowDeleted(this, new LEFTRowChangeEvent(((LEFTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.LEFTRowDeleting != null)) {
                this.LEFTRowDeleting(this, new LEFTRowChangeEvent(((LEFTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveLEFTRow(LEFTRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "LEFTDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class TRANSITIONLAYOUTDataTable : global::System.Data.TypedTableBase<TRANSITIONLAYOUTRow> {
        
        private global::System.Data.DataColumn columntarget;
        
        private global::System.Data.DataColumn columndrawvertical;
        
        private global::System.Data.DataColumn columnTRANSITIONLAYOUT_Id;
        
        private global::System.Data.DataColumn columnSTATELAYOUT_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTDataTable() {
            this.TableName = "TRANSITIONLAYOUT";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TRANSITIONLAYOUTDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TRANSITIONLAYOUTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn targetColumn {
            get {
                return this.columntarget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn drawverticalColumn {
            get {
                return this.columndrawvertical;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn TRANSITIONLAYOUT_IdColumn {
            get {
                return this.columnTRANSITIONLAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn STATELAYOUT_IdColumn {
            get {
                return this.columnSTATELAYOUT_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRow this[int index] {
            get {
                return ((TRANSITIONLAYOUTRow)(this.Rows[index]));
            }
        }
        
        public event TRANSITIONLAYOUTRowChangeEventHandler TRANSITIONLAYOUTRowChanging;
        
        public event TRANSITIONLAYOUTRowChangeEventHandler TRANSITIONLAYOUTRowChanged;
        
        public event TRANSITIONLAYOUTRowChangeEventHandler TRANSITIONLAYOUTRowDeleting;
        
        public event TRANSITIONLAYOUTRowChangeEventHandler TRANSITIONLAYOUTRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddTRANSITIONLAYOUTRow(TRANSITIONLAYOUTRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRow AddTRANSITIONLAYOUTRow(string target, string drawvertical, STATELAYOUTRow parentSTATELAYOUTRowBySTATELAYOUT_TRANSITIONLAYOUT) {
            TRANSITIONLAYOUTRow rowTRANSITIONLAYOUTRow = ((TRANSITIONLAYOUTRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    target,
                    drawvertical,
                    null,
                    null};
            if ((parentSTATELAYOUTRowBySTATELAYOUT_TRANSITIONLAYOUT != null)) {
                columnValuesArray[3] = parentSTATELAYOUTRowBySTATELAYOUT_TRANSITIONLAYOUT[1];
            }
            rowTRANSITIONLAYOUTRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowTRANSITIONLAYOUTRow);
            return rowTRANSITIONLAYOUTRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            TRANSITIONLAYOUTDataTable cln = ((TRANSITIONLAYOUTDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new TRANSITIONLAYOUTDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columntarget = base.Columns["target"];
            this.columndrawvertical = base.Columns["drawvertical"];
            this.columnTRANSITIONLAYOUT_Id = base.Columns["TRANSITIONLAYOUT_Id"];
            this.columnSTATELAYOUT_Id = base.Columns["STATELAYOUT_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columntarget = new global::System.Data.DataColumn("target", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columntarget);
            this.columndrawvertical = new global::System.Data.DataColumn("drawvertical", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columndrawvertical);
            this.columnTRANSITIONLAYOUT_Id = new global::System.Data.DataColumn("TRANSITIONLAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnTRANSITIONLAYOUT_Id);
            this.columnSTATELAYOUT_Id = new global::System.Data.DataColumn("STATELAYOUT_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnSTATELAYOUT_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnTRANSITIONLAYOUT_Id}, true));
            this.columntarget.Namespace = "";
            this.columndrawvertical.Namespace = "";
            this.columnTRANSITIONLAYOUT_Id.AutoIncrement = true;
            this.columnTRANSITIONLAYOUT_Id.AllowDBNull = false;
            this.columnTRANSITIONLAYOUT_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRow NewTRANSITIONLAYOUTRow() {
            return ((TRANSITIONLAYOUTRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new TRANSITIONLAYOUTRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(TRANSITIONLAYOUTRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.TRANSITIONLAYOUTRowChanged != null)) {
                this.TRANSITIONLAYOUTRowChanged(this, new TRANSITIONLAYOUTRowChangeEvent(((TRANSITIONLAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.TRANSITIONLAYOUTRowChanging != null)) {
                this.TRANSITIONLAYOUTRowChanging(this, new TRANSITIONLAYOUTRowChangeEvent(((TRANSITIONLAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.TRANSITIONLAYOUTRowDeleted != null)) {
                this.TRANSITIONLAYOUTRowDeleted(this, new TRANSITIONLAYOUTRowChangeEvent(((TRANSITIONLAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.TRANSITIONLAYOUTRowDeleting != null)) {
                this.TRANSITIONLAYOUTRowDeleting(this, new TRANSITIONLAYOUTRowChangeEvent(((TRANSITIONLAYOUTRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveTRANSITIONLAYOUTRow(TRANSITIONLAYOUTRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            AUTOMATON ds = new AUTOMATON();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "TRANSITIONLAYOUTDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ITEMRow : global::System.Data.DataRow {
        
        private ITEMDataTable tableITEM;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ITEMRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableITEM = ((ITEMDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableITEM.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte value in Tabelle ITEM ist DBNull.", e);
                }
            }
            set {
                this[this.tableITEM.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ALPHABET_Id {
            get {
                try {
                    return ((int)(this[this.tableITEM.ALPHABET_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte ALPHABET_Id in Tabelle ITEM ist DBNull.", e);
                }
            }
            set {
                this[this.tableITEM.ALPHABET_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TAPEALPHABET_Id {
            get {
                try {
                    return ((int)(this[this.tableITEM.TAPEALPHABET_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte TAPEALPHABET_Id in Tabelle ITEM ist DBNull.", e);
                }
            }
            set {
                this[this.tableITEM.TAPEALPHABET_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETRow ALPHABETRow {
            get {
                return ((ALPHABETRow)(this.GetParentRow(this.Table.ParentRelations["ALPHABET_ITEM"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["ALPHABET_ITEM"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETRow TAPEALPHABETRow {
            get {
                return ((TAPEALPHABETRow)(this.GetParentRow(this.Table.ParentRelations["TAPEALPHABET_ITEM"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["TAPEALPHABET_ITEM"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableITEM.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableITEM.valueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsALPHABET_IdNull() {
            return this.IsNull(this.tableITEM.ALPHABET_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetALPHABET_IdNull() {
            this[this.tableITEM.ALPHABET_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTAPEALPHABET_IdNull() {
            return this.IsNull(this.tableITEM.TAPEALPHABET_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTAPEALPHABET_IdNull() {
            this[this.tableITEM.TAPEALPHABET_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class TOPRow : global::System.Data.DataRow {
        
        private TOPDataTable tableTOP;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TOPRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableTOP = ((TOPDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableTOP.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte value in Tabelle TOP ist DBNull.", e);
                }
            }
            set {
                this[this.tableTOP.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TRANSITIONLAYOUT_Id {
            get {
                try {
                    return ((int)(this[this.tableTOP.TRANSITIONLAYOUT_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte TRANSITIONLAYOUT_Id in Tabelle TOP ist DBNull.", e);
                }
            }
            set {
                this[this.tableTOP.TRANSITIONLAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int STATELAYOUT_Id {
            get {
                try {
                    return ((int)(this[this.tableTOP.STATELAYOUT_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte STATELAYOUT_Id in Tabelle TOP ist DBNull.", e);
                }
            }
            set {
                this[this.tableTOP.STATELAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRow TRANSITIONLAYOUTRow {
            get {
                return ((TRANSITIONLAYOUTRow)(this.GetParentRow(this.Table.ParentRelations["TRANSITIONLAYOUT_TOP"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["TRANSITIONLAYOUT_TOP"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow STATELAYOUTRow {
            get {
                return ((STATELAYOUTRow)(this.GetParentRow(this.Table.ParentRelations["STATELAYOUT_TOP"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["STATELAYOUT_TOP"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableTOP.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableTOP.valueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTRANSITIONLAYOUT_IdNull() {
            return this.IsNull(this.tableTOP.TRANSITIONLAYOUT_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTRANSITIONLAYOUT_IdNull() {
            this[this.tableTOP.TRANSITIONLAYOUT_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSTATELAYOUT_IdNull() {
            return this.IsNull(this.tableTOP.STATELAYOUT_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSTATELAYOUT_IdNull() {
            this[this.tableTOP.STATELAYOUT_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class TYPERow : global::System.Data.DataRow {
        
        private TYPEDataTable tableTYPE;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TYPERow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableTYPE = ((TYPEDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableTYPE.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte value in Tabelle TYPE ist DBNull.", e);
                }
            }
            set {
                this[this.tableTYPE.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableTYPE.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableTYPE.valueColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class ALPHABETRow : global::System.Data.DataRow {
        
        private ALPHABETDataTable tableALPHABET;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal ALPHABETRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableALPHABET = ((ALPHABETDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ALPHABET_Id {
            get {
                return ((int)(this[this.tableALPHABET.ALPHABET_IdColumn]));
            }
            set {
                this[this.tableALPHABET.ALPHABET_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRow[] GetITEMRows() {
            if ((this.Table.ChildRelations["ALPHABET_ITEM"] == null)) {
                return new ITEMRow[0];
            }
            else {
                return ((ITEMRow[])(base.GetChildRows(this.Table.ChildRelations["ALPHABET_ITEM"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class TAPEALPHABETRow : global::System.Data.DataRow {
        
        private TAPEALPHABETDataTable tableTAPEALPHABET;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TAPEALPHABETRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableTAPEALPHABET = ((TAPEALPHABETDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TAPEALPHABET_Id {
            get {
                return ((int)(this[this.tableTAPEALPHABET.TAPEALPHABET_IdColumn]));
            }
            set {
                this[this.tableTAPEALPHABET.TAPEALPHABET_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRow[] GetITEMRows() {
            if ((this.Table.ChildRelations["TAPEALPHABET_ITEM"] == null)) {
                return new ITEMRow[0];
            }
            else {
                return ((ITEMRow[])(base.GetChildRows(this.Table.ChildRelations["TAPEALPHABET_ITEM"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class STATERow : global::System.Data.DataRow {
        
        private STATEDataTable tableSTATE;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal STATERow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSTATE = ((STATEDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tableSTATE.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte name in Tabelle STATE ist DBNull.", e);
                }
            }
            set {
                this[this.tableSTATE.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string finalstate {
            get {
                try {
                    return ((string)(this[this.tableSTATE.finalstateColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte finalstate in Tabelle STATE ist DBNull.", e);
                }
            }
            set {
                this[this.tableSTATE.finalstateColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int STATE_Id {
            get {
                return ((int)(this[this.tableSTATE.STATE_IdColumn]));
            }
            set {
                this[this.tableSTATE.STATE_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tableSTATE.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tableSTATE.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsfinalstateNull() {
            return this.IsNull(this.tableSTATE.finalstateColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetfinalstateNull() {
            this[this.tableSTATE.finalstateColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRow[] GetTRANSITIONRows() {
            if ((this.Table.ChildRelations["STATE_TRANSITION"] == null)) {
                return new TRANSITIONRow[0];
            }
            else {
                return ((TRANSITIONRow[])(base.GetChildRows(this.Table.ChildRelations["STATE_TRANSITION"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class TRANSITIONRow : global::System.Data.DataRow {
        
        private TRANSITIONDataTable tableTRANSITION;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TRANSITIONRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableTRANSITION = ((TRANSITIONDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string target {
            get {
                try {
                    return ((string)(this[this.tableTRANSITION.targetColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte target in Tabelle TRANSITION ist DBNull.", e);
                }
            }
            set {
                this[this.tableTRANSITION.targetColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TRANSITION_Id {
            get {
                return ((int)(this[this.tableTRANSITION.TRANSITION_IdColumn]));
            }
            set {
                this[this.tableTRANSITION.TRANSITION_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int STATE_Id {
            get {
                try {
                    return ((int)(this[this.tableTRANSITION.STATE_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte STATE_Id in Tabelle TRANSITION ist DBNull.", e);
                }
            }
            set {
                this[this.tableTRANSITION.STATE_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATERow STATERow {
            get {
                return ((STATERow)(this.GetParentRow(this.Table.ParentRelations["STATE_TRANSITION"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["STATE_TRANSITION"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstargetNull() {
            return this.IsNull(this.tableTRANSITION.targetColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettargetNull() {
            this[this.tableTRANSITION.targetColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSTATE_IdNull() {
            return this.IsNull(this.tableTRANSITION.STATE_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSTATE_IdNull() {
            this[this.tableTRANSITION.STATE_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELRow[] GetLABELRows() {
            if ((this.Table.ChildRelations["TRANSITION_LABEL"] == null)) {
                return new LABELRow[0];
            }
            else {
                return ((LABELRow[])(base.GetChildRows(this.Table.ChildRelations["TRANSITION_LABEL"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class LABELRow : global::System.Data.DataRow {
        
        private LABELDataTable tableLABEL;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal LABELRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableLABEL = ((LABELDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string read {
            get {
                try {
                    return ((string)(this[this.tableLABEL.readColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte read in Tabelle LABEL ist DBNull.", e);
                }
            }
            set {
                this[this.tableLABEL.readColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string direction {
            get {
                try {
                    return ((string)(this[this.tableLABEL.directionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte direction in Tabelle LABEL ist DBNull.", e);
                }
            }
            set {
                this[this.tableLABEL.directionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string write {
            get {
                try {
                    return ((string)(this[this.tableLABEL.writeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte write in Tabelle LABEL ist DBNull.", e);
                }
            }
            set {
                this[this.tableLABEL.writeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TRANSITION_Id {
            get {
                try {
                    return ((int)(this[this.tableLABEL.TRANSITION_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte TRANSITION_Id in Tabelle LABEL ist DBNull.", e);
                }
            }
            set {
                this[this.tableLABEL.TRANSITION_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRow TRANSITIONRow {
            get {
                return ((TRANSITIONRow)(this.GetParentRow(this.Table.ParentRelations["TRANSITION_LABEL"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["TRANSITION_LABEL"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsreadNull() {
            return this.IsNull(this.tableLABEL.readColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetreadNull() {
            this[this.tableLABEL.readColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdirectionNull() {
            return this.IsNull(this.tableLABEL.directionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdirectionNull() {
            this[this.tableLABEL.directionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IswriteNull() {
            return this.IsNull(this.tableLABEL.writeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetwriteNull() {
            this[this.tableLABEL.writeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsTRANSITION_IdNull() {
            return this.IsNull(this.tableLABEL.TRANSITION_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetTRANSITION_IdNull() {
            this[this.tableLABEL.TRANSITION_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class INITIALSTATERow : global::System.Data.DataRow {
        
        private INITIALSTATEDataTable tableINITIALSTATE;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal INITIALSTATERow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableINITIALSTATE = ((INITIALSTATEDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableINITIALSTATE.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte value in Tabelle INITIALSTATE ist DBNull.", e);
                }
            }
            set {
                this[this.tableINITIALSTATE.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableINITIALSTATE.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableINITIALSTATE.valueColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class TAPEINITIALCHARRow : global::System.Data.DataRow {
        
        private TAPEINITIALCHARDataTable tableTAPEINITIALCHAR;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TAPEINITIALCHARRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableTAPEINITIALCHAR = ((TAPEINITIALCHARDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableTAPEINITIALCHAR.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte value in Tabelle TAPEINITIALCHAR ist DBNull.", e);
                }
            }
            set {
                this[this.tableTAPEINITIALCHAR.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableTAPEINITIALCHAR.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableTAPEINITIALCHAR.valueColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class LAYOUTRow : global::System.Data.DataRow {
        
        private LAYOUTDataTable tableLAYOUT;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal LAYOUTRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableLAYOUT = ((LAYOUTDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NOTEPAD {
            get {
                try {
                    return ((string)(this[this.tableLAYOUT.NOTEPADColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte NOTEPAD in Tabelle LAYOUT ist DBNull.", e);
                }
            }
            set {
                this[this.tableLAYOUT.NOTEPADColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int LAYOUT_Id {
            get {
                return ((int)(this[this.tableLAYOUT.LAYOUT_IdColumn]));
            }
            set {
                this[this.tableLAYOUT.LAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNOTEPADNull() {
            return this.IsNull(this.tableLAYOUT.NOTEPADColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNOTEPADNull() {
            this[this.tableLAYOUT.NOTEPADColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow[] GetSTATELAYOUTRows() {
            if ((this.Table.ChildRelations["LAYOUT_STATELAYOUT"] == null)) {
                return new STATELAYOUTRow[0];
            }
            else {
                return ((STATELAYOUTRow[])(base.GetChildRows(this.Table.ChildRelations["LAYOUT_STATELAYOUT"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class STATELAYOUTRow : global::System.Data.DataRow {
        
        private STATELAYOUTDataTable tableSTATELAYOUT;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal STATELAYOUTRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableSTATELAYOUT = ((STATELAYOUTDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tableSTATELAYOUT.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte name in Tabelle STATELAYOUT ist DBNull.", e);
                }
            }
            set {
                this[this.tableSTATELAYOUT.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int STATELAYOUT_Id {
            get {
                return ((int)(this[this.tableSTATELAYOUT.STATELAYOUT_IdColumn]));
            }
            set {
                this[this.tableSTATELAYOUT.STATELAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int LAYOUT_Id {
            get {
                try {
                    return ((int)(this[this.tableSTATELAYOUT.LAYOUT_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte LAYOUT_Id in Tabelle STATELAYOUT ist DBNull.", e);
                }
            }
            set {
                this[this.tableSTATELAYOUT.LAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTRow LAYOUTRow {
            get {
                return ((LAYOUTRow)(this.GetParentRow(this.Table.ParentRelations["LAYOUT_STATELAYOUT"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["LAYOUT_STATELAYOUT"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tableSTATELAYOUT.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tableSTATELAYOUT.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsLAYOUT_IdNull() {
            return this.IsNull(this.tableSTATELAYOUT.LAYOUT_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetLAYOUT_IdNull() {
            this[this.tableSTATELAYOUT.LAYOUT_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTRow[] GetLEFTRows() {
            if ((this.Table.ChildRelations["STATELAYOUT_LEFT"] == null)) {
                return new LEFTRow[0];
            }
            else {
                return ((LEFTRow[])(base.GetChildRows(this.Table.ChildRelations["STATELAYOUT_LEFT"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRow[] GetTOPRows() {
            if ((this.Table.ChildRelations["STATELAYOUT_TOP"] == null)) {
                return new TOPRow[0];
            }
            else {
                return ((TOPRow[])(base.GetChildRows(this.Table.ChildRelations["STATELAYOUT_TOP"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRow[] GetTRANSITIONLAYOUTRows() {
            if ((this.Table.ChildRelations["STATELAYOUT_TRANSITIONLAYOUT"] == null)) {
                return new TRANSITIONLAYOUTRow[0];
            }
            else {
                return ((TRANSITIONLAYOUTRow[])(base.GetChildRows(this.Table.ChildRelations["STATELAYOUT_TRANSITIONLAYOUT"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class LEFTRow : global::System.Data.DataRow {
        
        private LEFTDataTable tableLEFT;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal LEFTRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableLEFT = ((LEFTDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string value {
            get {
                try {
                    return ((string)(this[this.tableLEFT.valueColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte value in Tabelle LEFT ist DBNull.", e);
                }
            }
            set {
                this[this.tableLEFT.valueColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int STATELAYOUT_Id {
            get {
                try {
                    return ((int)(this[this.tableLEFT.STATELAYOUT_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte STATELAYOUT_Id in Tabelle LEFT ist DBNull.", e);
                }
            }
            set {
                this[this.tableLEFT.STATELAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow STATELAYOUTRow {
            get {
                return ((STATELAYOUTRow)(this.GetParentRow(this.Table.ParentRelations["STATELAYOUT_LEFT"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["STATELAYOUT_LEFT"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsvalueNull() {
            return this.IsNull(this.tableLEFT.valueColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetvalueNull() {
            this[this.tableLEFT.valueColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSTATELAYOUT_IdNull() {
            return this.IsNull(this.tableLEFT.STATELAYOUT_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSTATELAYOUT_IdNull() {
            this[this.tableLEFT.STATELAYOUT_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class TRANSITIONLAYOUTRow : global::System.Data.DataRow {
        
        private TRANSITIONLAYOUTDataTable tableTRANSITIONLAYOUT;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal TRANSITIONLAYOUTRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableTRANSITIONLAYOUT = ((TRANSITIONLAYOUTDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string target {
            get {
                try {
                    return ((string)(this[this.tableTRANSITIONLAYOUT.targetColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte target in Tabelle TRANSITIONLAYOUT ist DBNull.", e);
                }
            }
            set {
                this[this.tableTRANSITIONLAYOUT.targetColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string drawvertical {
            get {
                try {
                    return ((string)(this[this.tableTRANSITIONLAYOUT.drawverticalColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte drawvertical in Tabelle TRANSITIONLAYOUT ist DBNull.", e);
                }
            }
            set {
                this[this.tableTRANSITIONLAYOUT.drawverticalColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TRANSITIONLAYOUT_Id {
            get {
                return ((int)(this[this.tableTRANSITIONLAYOUT.TRANSITIONLAYOUT_IdColumn]));
            }
            set {
                this[this.tableTRANSITIONLAYOUT.TRANSITIONLAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int STATELAYOUT_Id {
            get {
                try {
                    return ((int)(this[this.tableTRANSITIONLAYOUT.STATELAYOUT_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("Der Wert für Spalte STATELAYOUT_Id in Tabelle TRANSITIONLAYOUT ist DBNull.", e);
                }
            }
            set {
                this[this.tableTRANSITIONLAYOUT.STATELAYOUT_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow STATELAYOUTRow {
            get {
                return ((STATELAYOUTRow)(this.GetParentRow(this.Table.ParentRelations["STATELAYOUT_TRANSITIONLAYOUT"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["STATELAYOUT_TRANSITIONLAYOUT"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstargetNull() {
            return this.IsNull(this.tableTRANSITIONLAYOUT.targetColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettargetNull() {
            this[this.tableTRANSITIONLAYOUT.targetColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsdrawverticalNull() {
            return this.IsNull(this.tableTRANSITIONLAYOUT.drawverticalColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetdrawverticalNull() {
            this[this.tableTRANSITIONLAYOUT.drawverticalColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsSTATELAYOUT_IdNull() {
            return this.IsNull(this.tableTRANSITIONLAYOUT.STATELAYOUT_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetSTATELAYOUT_IdNull() {
            this[this.tableTRANSITIONLAYOUT.STATELAYOUT_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRow[] GetTOPRows() {
            if ((this.Table.ChildRelations["TRANSITIONLAYOUT_TOP"] == null)) {
                return new TOPRow[0];
            }
            else {
                return ((TOPRow[])(base.GetChildRows(this.Table.ChildRelations["TRANSITIONLAYOUT_TOP"])));
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ITEMRowChangeEvent : global::System.EventArgs {
        
        private ITEMRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRowChangeEvent(ITEMRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ITEMRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class TOPRowChangeEvent : global::System.EventArgs {
        
        private TOPRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRowChangeEvent(TOPRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TOPRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class TYPERowChangeEvent : global::System.EventArgs {
        
        private TYPERow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYPERowChangeEvent(TYPERow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYPERow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class ALPHABETRowChangeEvent : global::System.EventArgs {
        
        private ALPHABETRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETRowChangeEvent(ALPHABETRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALPHABETRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class TAPEALPHABETRowChangeEvent : global::System.EventArgs {
        
        private TAPEALPHABETRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETRowChangeEvent(TAPEALPHABETRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEALPHABETRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class STATERowChangeEvent : global::System.EventArgs {
        
        private STATERow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATERowChangeEvent(STATERow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATERow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class TRANSITIONRowChangeEvent : global::System.EventArgs {
        
        private TRANSITIONRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRowChangeEvent(TRANSITIONRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class LABELRowChangeEvent : global::System.EventArgs {
        
        private LABELRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELRowChangeEvent(LABELRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LABELRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class INITIALSTATERowChangeEvent : global::System.EventArgs {
        
        private INITIALSTATERow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INITIALSTATERowChangeEvent(INITIALSTATERow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public INITIALSTATERow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class TAPEINITIALCHARRowChangeEvent : global::System.EventArgs {
        
        private TAPEINITIALCHARRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEINITIALCHARRowChangeEvent(TAPEINITIALCHARRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAPEINITIALCHARRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class LAYOUTRowChangeEvent : global::System.EventArgs {
        
        private LAYOUTRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTRowChangeEvent(LAYOUTRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LAYOUTRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class STATELAYOUTRowChangeEvent : global::System.EventArgs {
        
        private STATELAYOUTRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRowChangeEvent(STATELAYOUTRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STATELAYOUTRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class LEFTRowChangeEvent : global::System.EventArgs {
        
        private LEFTRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTRowChangeEvent(LEFTRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LEFTRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class TRANSITIONLAYOUTRowChangeEvent : global::System.EventArgs {
        
        private TRANSITIONLAYOUTRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRowChangeEvent(TRANSITIONLAYOUTRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRANSITIONLAYOUTRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
